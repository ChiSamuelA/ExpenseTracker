name: Full CI/CD Pipeline to Render

on:
  push:
    branches:
      - master

jobs:
  lint:
    name: üîç Lint Code
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: |
          cd server
          npm install

      - name: Run ESLint
        run: npm run lint
        working-directory: server
        continue-on-error: true

  test:
    name: üß™ Run Tests
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: |
          cd server
          npm install

      - name: Run Tests
        run: npm test
        working-directory: server
        continue-on-error: true

  build:
    name: üèó Build App
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: |
          cd server
          npm install

      - name: Simulate Build
        run: echo "‚úÖ Build successful!"
        working-directory: server

  startup-check:
    name: üß™ Startup Check (Prod Sim)
    runs-on: ubuntu-latest
    needs: build

    env:
      MONGO_URI: ${{ secrets.MONGO_URI }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
      CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
      CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: |
          cd server
          npm install

      - name: Start Server and Run Health Check
        run: |
          cd server
          node server.js &
          SERVER_PID=$!
          sleep 5

          STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/api-docs)
          echo "Status: $STATUS"

          if [[ "$STATUS" -ne 200 && "$STATUS" -ne 301 ]]; then
            echo "‚ùå Server failed to start or /api-docs not responding!"
            kill $SERVER_PID
            exit 1
          fi

          echo "‚úÖ Server started successfully!"
          kill $SERVER_PID

  deploy:
    name: üöÄ Deploy to Render
    runs-on: ubuntu-latest
    needs: startup-check

    steps:
      - uses: actions/checkout@v3

      - name: Trigger Render Deploy Hook
        run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}
